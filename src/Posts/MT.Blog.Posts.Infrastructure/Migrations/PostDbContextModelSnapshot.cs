// <auto-generated />
using System;
using MT.Blog.Posts.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MT.Blog.Posts.Infrastructure.Migrations
{
    [DbContext(typeof(PostDbContext))]
    partial class PostDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("posts")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("author_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int?>("CreatorAuthorId")
                        .HasColumnType("int")
                        .HasColumnName("creator_author_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("AuthorId")
                        .HasName("pk_authors");

                    b.HasIndex("CreatorAuthorId")
                        .HasDatabaseName("ix_authors_creator_author_id");

                    b.ToTable("authors", "posts");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int?>("CreatorAuthorId")
                        .HasColumnType("int")
                        .HasColumnName("creator_author_id");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar")
                        .HasColumnName("icon_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("CategoryId")
                        .HasName("pk_category");

                    b.HasIndex("CreatorAuthorId")
                        .HasDatabaseName("ix_category_creator_author_id");

                    b.ToTable("category", "posts");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("CommentId")
                        .HasName("pk_comments");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_comments_created_by");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_comments_parent_id");

                    b.HasIndex("PostId")
                        .HasDatabaseName("ix_comments_post_id");

                    b.ToTable("comments", "posts");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int?>("ParentPostId")
                        .HasColumnType("int")
                        .HasColumnName("parent_post_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("PostId")
                        .HasName("pk_posts");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_posts_category_id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_posts_created_by");

                    b.HasIndex("ParentPostId")
                        .HasDatabaseName("ix_posts_parent_post_id");

                    b.ToTable("posts", "posts");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("int")
                        .HasColumnName("updated_by");

                    b.HasKey("TagId")
                        .HasName("pk_tags");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_tags_created_by");

                    b.ToTable("tags", "posts");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<int>("PostsPostId")
                        .HasColumnType("int")
                        .HasColumnName("posts_post_id");

                    b.Property<int>("TagsTagId")
                        .HasColumnType("int")
                        .HasColumnName("tags_tag_id");

                    b.HasKey("PostsPostId", "TagsTagId")
                        .HasName("pk_post_tag");

                    b.HasIndex("TagsTagId")
                        .HasDatabaseName("ix_post_tag_tags_tag_id");

                    b.ToTable("post_tag", "posts");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Author", b =>
                {
                    b.HasOne("MT.Blog.Posts.Domain.Entities.Author", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorAuthorId")
                        .HasConstraintName("fk_authors_authors_creator_author_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Category", b =>
                {
                    b.HasOne("MT.Blog.Posts.Domain.Entities.Author", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorAuthorId")
                        .HasConstraintName("fk_category_authors_creator_author_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Comment", b =>
                {
                    b.HasOne("MT.Blog.Posts.Domain.Entities.Author", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_authors_created_by");

                    b.HasOne("MT.Blog.Posts.Domain.Entities.Comment", "Parent")
                        .WithMany("SubComments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_comments_comments_parent_id");

                    b.HasOne("MT.Blog.Posts.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_comments_posts_post_id");

                    b.Navigation("Creator");

                    b.Navigation("Parent");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Post", b =>
                {
                    b.HasOne("MT.Blog.Posts.Domain.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_category_category_id");

                    b.HasOne("MT.Blog.Posts.Domain.Entities.Author", "Creator")
                        .WithMany("Posts")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_posts_authors_created_by");

                    b.HasOne("MT.Blog.Posts.Domain.Entities.Post", "ParentPost")
                        .WithMany("SubPosts")
                        .HasForeignKey("ParentPostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("fk_posts_posts_parent_post_id");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("ParentPost");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Tag", b =>
                {
                    b.HasOne("MT.Blog.Posts.Domain.Entities.Author", "Creator")
                        .WithMany("Tags")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tags_authors_created_by");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("MT.Blog.Posts.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_tag_posts_posts_post_id");

                    b.HasOne("MT.Blog.Posts.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_post_tag_tags_tags_tag_id");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Author", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Comment", b =>
                {
                    b.Navigation("SubComments");
                });

            modelBuilder.Entity("MT.Blog.Posts.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("SubPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
